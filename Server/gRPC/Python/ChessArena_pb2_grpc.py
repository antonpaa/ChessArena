# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ChessArena_pb2 as ChessArena__pb2


class GameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/GameManager.GameService/Initialize',
                request_serializer=ChessArena__pb2.GameInformation.SerializeToString,
                response_deserializer=ChessArena__pb2.GameStartInformation.FromString,
                )
        self.Act = channel.stream_stream(
                '/GameManager.GameService/Act',
                request_serializer=ChessArena__pb2.Move.SerializeToString,
                response_deserializer=ChessArena__pb2.Move.FromString,
                )


class GameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialize(self, request, context):
        """A simple RPC

        Inform server that the client is ready to start the game. 
        Returns one of the following:
        1. Player is starting player (white). Opponent move message not set.
        2. Player is not starting player (black). Opponent move message provides opening
        move coordinates. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Act(self, request_iterator, context):
        """A Bidirectional streaming RPC.

        Send player moves. Receive opponent moves.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=ChessArena__pb2.GameInformation.FromString,
                    response_serializer=ChessArena__pb2.GameStartInformation.SerializeToString,
            ),
            'Act': grpc.stream_stream_rpc_method_handler(
                    servicer.Act,
                    request_deserializer=ChessArena__pb2.Move.FromString,
                    response_serializer=ChessArena__pb2.Move.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GameManager.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GameManager.GameService/Initialize',
            ChessArena__pb2.GameInformation.SerializeToString,
            ChessArena__pb2.GameStartInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Act(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/GameManager.GameService/Act',
            ChessArena__pb2.Move.SerializeToString,
            ChessArena__pb2.Move.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
