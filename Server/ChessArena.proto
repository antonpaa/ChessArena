syntax = "proto3";

service ChessArena {
    // A simple RPC
    //
    // Inform server that the client is ready to start the game. 
    // Returns one of the following:
    // 1. Player is starting player (white). Opponent move message not set.
    // 2. Player is not starting player (black). Opponent move message provides opening
    //    move coordinates. 
    rpc Initialize(PlayerInformation) returns (GameStartInformation) {}

    // A Bidirectional streaming RPC.
    //
    // Send player moves. Receive opponent moves.
    rpc CreateMovements(stream PlayerMove) returns (stream Move) {}
}

// Initialize

message PlayerInformation {
    string name = 1;    
}

message GameStartInformation {
    // True if client is starting player.
    // If false, opponent move is also returned.
    bool white_player = 1;
    Move opponent_move = 2;
}

// Create movements

message PlayerMove {
    Move move = 1;
    // Any optional additional data about the move.
    // E.g. search depth, eval count, strategy...
    string diagnostics = 2;
}

message Move {
    // Standard chess notation (file, rank), e.g. "f5"
    string start_position = 1;
    // Standard chess notation (file, rank) e.g. "f6"
    string end_position = 2;
    bool check = 3;    
    bool check_mate = 4;
    bool castling = 5;
    enum PromotionPieceType {
        NO_PROMOTION = 0;
        QUEEN = 1;
        ROOK = 2;
        KNIGHT = 3;
        BISHOP = 4;
    }
    // Set to non-zero if pawn has reached 8th rank.
    PromotionPieceType promotion_result = 6;
}
