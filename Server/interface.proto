syntax = "proto3";

service MovementStream {
    // A simple RPC
    //
    // Inform server that the client is ready to start the game. 
    // Returns either
    rpc Initialize(ClientInformation) returns (GameStartInformation) {}

    // A Bidirectional streaming RPC.
    //
    // Send client moves. Receive opponent moves.
    rpc CreateMovements(stream ClientMove) returns (stream OpponentMove) {}
}

// Initialize

message ClientInformation {
    string name = 1;    
}

message GameStartInformation {
    // True if client is starting player.
    // If false, opponent move is also returned.
    bool whitePlayer = 1;

    MoveCoordinates opponentMove = 2;
}


// Create movements

message ClientMove {
    MoveCoordinates coordinates = 1;

    // For testing
    optional string pieceType = 2;

    // Additional data about the move.
    // E.g. search depth, eval count, strategy...
    // TODO: change to list type
    optional string diagnostics = 3;
}

message OpponentMove {
    MoveCoordinates coordinates = 1;
    
    // Game ended after opponent move to either check-mate or draw
    bool gameEnd = 2;
    
    // For testing
    optional string pieceType = 3;
    
}

message MoveCoordinates {
    // (file, rank) e.g. "f5"
    string startPosition = 1;

    // (file, rank) e.g. "f6"
    string endPosition = 2;

    // For testing. A piece was captured as result.
    optional bool capture = 3;
}
