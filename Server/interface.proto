syntax = "proto3";

service ChessArena {
    // A simple RPC
    //
    // Inform server that the client is ready to start the game. 
    // Returns one of the following:
    // 1. Player is starting player (white). Opponent move message not set.
    // 2. Player is not starting player (black). Opponent move message provides opening
    //    move coordinates. 
    rpc Initialize(PlayerInformation) returns (GameStartInformation) {}

    // A Bidirectional streaming RPC.
    //
    // Send player moves. Receive opponent moves.
    rpc CreateMovements(stream PlayerMove) returns (stream OpponentMove) {}
}

// Initialize

message PlayerInformation {
    string name = 1;    
}

message GameStartInformation {
    // True if client is starting player.
    // If false, opponent move is also returned.
    bool whitePlayer = 1;

    MoveCoordinates opponentMove = 2;
}


// Create movements

message PlayerMove {
    MoveCoordinates coordinates = 1;

    // Any optional additional data about the move.
    // E.g. search depth, eval count, strategy...
    string diagnostics = 2;
}

message OpponentMove {
    MoveCoordinates coordinates = 1;
    
    // Game ended after opponent move to either check-mate or draw
    bool gameEnd = 2;    
}

message MoveCoordinates {
    // Standard chess notation (file, rank), e.g. "f5"
    string startPosition = 1;

    // Standard chess notation (file, rank) e.g. "f6"
    string endPosition = 2;

    enum PromotionPieceType {
        NOPROMOTION = 0;
        QUEEN = 1;
        ROOK = 2;
        KNIGHT = 3;
        BISHOP = 4;
    }

    // Set if pawn has reached 8th rank.
    PromotionPieceType promotionResult = 3;
}
